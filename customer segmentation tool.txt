import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D



# Read the dataset
customer_dataset = pd.read_csv('Mall_Customers.csv')

# Data inspection
print(customer_dataset.head())
print(customer_dataset.shape)
print(customer_dataset.describe())
print(customer_dataset.dtypes)
print(customer_dataset.info())

# Check for null values
print(customer_dataset.isnull().sum())

# Drop CustomerID column
customer_dataset.drop(['CustomerID'], axis=1, inplace=True)

# Plot distributions
plt.figure(1, figsize=(12, 4))
for i, col in enumerate(['Age', 'Annual Income (k$)', 'Spending Score (1-100)']):
    plt.subplot(1, 3, i + 1)
    sns.distplot(customer_dataset[col], bins=20)
    plt.title(f'Distplot of {col}')
plt.tight_layout()
plt.show()

# Gender count plot
plt.figure(figsize=(15, 5))
sns.countplot(y='Gender', data=customer_dataset)
plt.title('Gender Count Plot')
plt.show()

# Violin plots
plt.figure(1, figsize=(15, 7))
for i, col in enumerate(['Age', 'Annual Income (k$)', 'Spending Score (1-100)']):
    plt.subplot(1, 3, i + 1)
    sns.violinplot(x=col, y='Gender', data=customer_dataset)
    plt.title(f'Violin Plot of {col} by Gender')
plt.tight_layout()
plt.show()

# Age group bar plot
age_groups = ['18-25', '26-35', '36-45', '46-55', '55+']
age_counts = [customer_dataset.Age.between(18, 25).sum(),
              customer_dataset.Age.between(26, 35).sum(),
              customer_dataset.Age.between(36, 45).sum(),
              customer_dataset.Age.between(46, 55).sum(),
              customer_dataset.Age.between(56, 100).sum()]

plt.figure(figsize=(15, 6))
sns.barplot(x=age_groups, y=age_counts, palette='mako')
plt.title('Age Group Distribution')
plt.xlabel('Age Group')
plt.ylabel('Number of Customers')
plt.show()

# Scatter plot of Annual Income vs Spending Score
sns.relplot(x='Annual Income (k$)', y='Spending Score (1-100)', data=customer_dataset)
plt.show()

# Spending Score distribution bar plot
ss_groups = ['1-20', '21-40', '41-60', '61-80', '81-100']
ss_counts = [customer_dataset['Spending Score (1-100)'].between(1, 20).sum(),
             customer_dataset['Spending Score (1-100)'].between(21, 40).sum(),
             customer_dataset['Spending Score (1-100)'].between(41, 60).sum(),
             customer_dataset['Spending Score (1-100)'].between(61, 80).sum(),
             customer_dataset['Spending Score (1-100)'].between(81, 100).sum()]

plt.figure(figsize=(15, 6))
sns.barplot(x=ss_groups, y=ss_counts, palette='rocket')
plt.title('Spending Score Distribution')
plt.xlabel('Spending Score Group')
plt.ylabel('Number of Customers')
plt.show()

# Annual Income distribution bar plot
income_groups = ['$0-30,000', '$31,000-60,000', '$61,000-90,000', '$91,000-120,000', '$121,000-150,000']
income_counts = [customer_dataset['Annual Income (k$)'].between(0, 30).sum(),
                 customer_dataset['Annual Income (k$)'].between(31, 60).sum(),
                 customer_dataset['Annual Income (k$)'].between(61, 90).sum(),
                 customer_dataset['Annual Income (k$)'].between(91, 120).sum(),
                 customer_dataset['Annual Income (k$)'].between(121, 150).sum()]

plt.figure(figsize=(15, 6))
sns.barplot(x=income_groups, y=income_counts, palette='Spectral')
plt.title('Annual Income Distribution')
plt.xlabel('Annual Income Group')
plt.ylabel('Number of Customers')
plt.show()

# KMeans Clustering based on Age and Spending Score
X1 = customer_dataset[['Age', 'Spending Score (1-100)']].values
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++')
    kmeans.fit(X1)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(12, 6))
plt.plot(range(1, 11), wcss, linewidth=2, color='red', marker='8')
plt.xlabel('K Value')
plt.ylabel('WCSS')
plt.grid(True)
plt.show()

kmeans = KMeans(n_clusters=4)
labels = kmeans.fit_predict(X1)

plt.figure(figsize=(12, 6))
plt.scatter(X1[:, 0], X1[:, 1], c=labels, cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color='black', marker='x')
plt.title('Clusters of Customers based on Age and Spending Score')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.show()

# KMeans Clustering based on Annual Income and Spending Score
X2 = customer_dataset[['Annual Income (k$)', 'Spending Score (1-100)']].values
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++')
    kmeans.fit(X2)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(12, 6))
plt.plot(range(1, 11), wcss, linewidth=2, color='red', marker='8')
plt.xlabel('K Value')
plt.ylabel('WCSS')
plt.grid(True)
plt.show()

kmeans = KMeans(n_clusters=5)
labels = kmeans.fit_predict(X2)

plt.figure(figsize=(12, 6))
plt.scatter(X2[:, 0], X2[:, 1], c=labels, cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color='black', marker='x')
plt.title('Clusters of Customers based on Annual Income and Spending Score')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

# KMeans Clustering based on Age, Annual Income, and Spending Score
X3 = customer_dataset[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].values
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++')
    kmeans.fit(X3)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(12, 6))
plt.plot(range(1, 11), wcss, linewidth=2, color='red', marker='8')
plt.xlabel('K Value')
plt.ylabel('WCSS')
plt.grid(True)
plt.show()

kmeans = KMeans(n_clusters=5)
labels = kmeans.fit_predict(X3)

customer_dataset['label'] = labels

fig = plt.figure(figsize=(20, 10))
ax = fig.add_subplot(111, projection='3d')
colors = ['blue', 'red', 'green', 'orange', 'purple']
for i in range(5):
    ax.scatter(customer_dataset.Age[customer_dataset.label == i],
               customer_dataset['Annual Income (k$)'][customer_dataset.label == i],
               customer_dataset['Spending Score (1-100)'][customer_dataset.label == i],
               c=colors[i], s=60)

ax.view_init(30, 185)
plt.title('Clusters of Customers based on Age, Annual Income, and Spending Score')
plt.xlabel('Age')
plt.ylabel('Annual Income')
ax.set_zlabel('Spending Score (1-100)')
plt.show()
kmeans = KMeans(n_clusters = 4)
label = kmeans.fit_predict(X1)

print(label)
print(kmeans.cluster_centers_)
plt.scatter(X1[:,0],X1[:,1], c=kmeans.labels_,cmap = 'rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], color = 'black')
plt.title('ProjectGurukul')
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.show()

# Creating Clusters based on Annual Income and Spending Score:
X2 = customer_dataset.loc[:,['Annual Income (k$)','Spending Score (1-100)']].values

from sklearn.cluster import KMeans
wcss=[]
for k in range(1,11):
  kmeans = KMeans(n_clusters = k, init = 'k-means++')
  kmeans.fit(X2)
  wcss.append(kmeans.inertia_)

plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11), wcss, linewidth = 2, color = 'red', marker = '8')
plt.xlabel('K Value')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters = 5)
label = kmeans.fit_predict(X2)

print(label)
print(kmeans.cluster_centers_)

plt.scatter(X2[:,0],X2[:,1], c=kmeans.labels_,cmap = 'rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], color = 'black')
plt.title('ProjectGurukul')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score (1-100)')
plt.show()